package Analizador;

public interface ParserConstants {

    int START_SYMBOL = 51;
    int FIRST_NON_TERMINAL = 51;
    int FIRST_SEMANTIC_ACTION = 82;
    int[][] PARSER_TABLE = {
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 4, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 7, -1, 8},
        {-1, -1, -1, -1, -1, -1, -1, -1, 13, 11, -1, -1, -1, -1, 10, -1, 9, -1, -1, -1, 14, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1},
        {-1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 23, 23, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, 23, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, 25},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 33, -1, 34, -1, 31, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, 36, -1, 36, -1, 36, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1},
        {-1, 39, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, 39, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 40, 42, -1, -1, 42, -1, 42},
        {-1, 43, 43, 43, 43, 43, 43, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, 43, -1},
        {-1, 47, 47, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, 49, 49, 49, -1, -1, 49, -1, 49},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 51, 52, 53, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, 56, 56, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, 59, 59, 59, 57, 58, -1, -1, -1, -1, -1, 59, 59, 59, -1, -1, 59, -1, 59},
        {-1, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, 65, 65, 65, 65, 65, 65, 65, 65, 61, 62, 63, 64, -1, 65, 65, 65, -1, -1, 65, -1, 65},
        {-1, 66, 67, 68, 69, 70, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1}
    };
    int[][] PRODUCTIONS = {
        {83, 19, 2, 118, 45, 52, 8, 69, 12, 2, 84, 46},
        {25, 53},
        {0},
        {55, 47, 57, 107, 58, 45, 54},
        {53},
        {0},
        {2, 105, 56},
        {48, 55},
        {0},
        {17},
        {15},
        {10},
        {23},
        {9},
        {21},
        {27, 71, 108},
        {0},
        {2, 105, 60, 110, 71, 111},
        {27},
        {28},
        {29},
        {20, 49, 55, 50, 112},
        {26, 49, 63, 50},
        {71, 85, 64},
        {48, 63},
        {0},
        {16, 71, 113, 22, 69, 66, 12, 114},
        {115, 11, 69},
        {0},
        {116, 18, 69, 12, 117},
        {59},
        {61},
        {62},
        {65},
        {67},
        {13, 109},
        {68, 70},
        {45, 69},
        {0},
        {73, 72},
        {44, 73, 86, 72},
        {43, 73, 87, 72},
        {0},
        {74},
        {24, 88},
        {14, 89},
        {42, 73, 90},
        {77, 75},
        {76, 91, 77, 92},
        {0},
        {30},
        {31},
        {32},
        {33},
        {34},
        {35},
        {79, 78},
        {36, 79, 93, 78},
        {37, 79, 94, 78},
        {0},
        {81, 80},
        {38, 81, 95, 80},
        {39, 81, 96, 80},
        {40, 81, 97, 80},
        {41, 81, 98, 80},
        {0},
        {2, 106},
        {3, 99},
        {4, 100},
        {5, 101},
        {6, 102},
        {7, 103},
        {49, 71, 50},
        {36, 81},
        {37, 81, 104}
    };
    String[] PARSER_ERROR = {
        "",
        "esperando fim de programa",
        "esperando identificador",
        "esperando inteiro",
        "esperando real",
        "esperando data",
        "esperando hora",
        "esperando literal",
        "esperando begin",
        "esperando boolean",
        "esperando date",
        "esperando else",
        "esperando end",
        "esperando exit",
        "esperando false",
        "esperando float",
        "esperando if",
        "esperando int",
        "esperando loop",
        "esperando module",
        "esperando read",
        "esperando string",
        "esperando then",
        "esperando time",
        "esperando true",
        "esperando var",
        "esperando write",
        "esperando \"=\"",
        "esperando \"+=\"",
        "esperando \"-=\"",
        "esperando \"==\"",
        "esperando \"!=\"",
        "esperando \"<\"",
        "esperando \"<=\"",
        "esperando \">\"",
        "esperando \">=\"",
        "esperando \"+\"",
        "esperando \"-\"",
        "esperando \"*\"",
        "esperando \"/\"",
        "esperando \"\\\"",
        "esperando \"%\"",
        "esperando \"!\"",
        "esperando \"&\"",
        "esperando \"|\"",
        "esperando \";\"",
        "esperando \".\"",
        "esperando \":\"",
        "esperando \",\"",
        "esperando \"(\"",
        "esperando \")\"",
        "esperando module",//"<programa> inválido",
        "esperando begin, var",//"<variaveis> inválido",
        "esperando identificador",//"<atrVar> inválido",
        "esperando identificador, begin",//"<atrVar1> inválido",
        "esperando identificador",//"<listaId> inválido",
        "esperando ':' , ',' , ')'",//"<listaId1> inválido",
        "esperando boolean, date, float, int, string, time",//"<tipo> inválido",
        "esperando '=' , ';'",//"<iniVar> inválido",
        "esperando identificador",//"<cmdAtribuicao> inválido",
        "esperando '=' , '+=' , '-='",//"<opAtr> inválido",
        "esperando read",//"<cmdEntrada> inválido",
        "esperando write",//"<cmdSaida> inválido",
        "esperando expressão",//"<listaExp> inválido",
        "esperando ',' , ')'",//"<listaExp1> inválido",
        "esperando if",//"<cmdSelecao> inválido",
        "esperando else, end",//"<senao> inválido",
        "esperando loop",//"<cmdRepeticao> inválido",
        "esperando identificador, exit, if, loop, read, write",//"<comando> inválido",
        "esperando identificador, exit, if, loop, read, write",//"<listaCmd> inválido",
        "esperando else, end, ';'",//"<listaCmd1> inválido",
        "esperando expressão",//"<expressao> inválido",
        "esperando expressão",//"<expressao1> inválido",
        "esperando expressão",//"<valor> inválido",
        "esperando expressão",//"<relacional> inválido",
        "esperando expressão",//"<relacional1> inválido",
        "esperando expressão",//"<operadorRelacional> inválido",
        "esperando expressão",//"<aritmetica> inválido",
        "esperando expressão",//"<aritmetica1> inválido",
        "esperando expressão",//"<termo> inválido",
        "esperando expressão",//"<termo1> inválido",
        "esperando expressão",//"<elemento> inválido"
    };
}
